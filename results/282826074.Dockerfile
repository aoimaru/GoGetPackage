[app/sources/282826074.Dockerfile]
digraph {
  "sha256:5e691c7ba4998fa4b60d1218bbc4ed9845bfa527d7d91b0c48922bbea45ce425" [label="docker-image://docker.io/library/ubuntu:18.04" shape="ellipse"];
  "sha256:0ae424ff7d5bf7ade5f6e8b7f570da250dcf5d2d69604799d84079241f7addd1" [label="/bin/sh -c APT_INSTALL=\"apt-get install -y --no-install-recommends\" &&     PIP_INSTALL=\"python -m pip --no-cache-dir install --upgrade\" &&     GIT_CLONE=\"git clone --depth 10\" &&     rm -rf /var/lib/apt/lists/*            /etc/apt/sources.list.d/cuda.list            /etc/apt/sources.list.d/nvidia-ml.list &&     apt-get update &&     DEBIAN_FRONTEND=noninteractive $APT_INSTALL         build-essential         apt-utils         ca-certificates         wget         git         vim         &&     $GIT_CLONE https://github.com/Kitware/CMake ~/cmake &&     cd ~/cmake &&     ./bootstrap &&     make -j\"$(nproc)\" install &&     $GIT_CLONE https://github.com/pjreddie/darknet.git ~/darknet &&     cd ~/darknet &&     sed -i 's/GPU=0/GPU=0/g' ~/darknet/Makefile &&     sed -i 's/CUDNN=0/CUDNN=0/g' ~/darknet/Makefile &&     make -j\"$(nproc)\" &&     cp ~/darknet/include/* /usr/local/include &&     cp ~/darknet/*.a /usr/local/lib &&     cp ~/darknet/*.so /usr/local/lib &&     cp ~/darknet/darknet /usr/local/bin &&     DEBIAN_FRONTEND=noninteractive $APT_INSTALL         software-properties-common         &&     add-apt-repository ppa:deadsnakes/ppa &&     apt-get update &&     DEBIAN_FRONTEND=noninteractive $APT_INSTALL         python3.6         python3.6-dev         python3-distutils-extra         &&     wget -O ~/get-pip.py         https://bootstrap.pypa.io/get-pip.py &&     python3.6 ~/get-pip.py &&     ln -s /usr/bin/python3.6 /usr/local/bin/python3 &&     ln -s /usr/bin/python3.6 /usr/local/bin/python &&     $PIP_INSTALL         setuptools         &&     $PIP_INSTALL         numpy         scipy         pandas         cloudpickle         scikit-learn         matplotlib         Cython         &&     export TORCH_NVCC_FLAGS=\"-D__CUDA_NO_HALF_OPERATORS__\" &&     $GIT_CLONE https://github.com/nagadomi/distro.git ~/torch --recursive &&     cd ~/torch/exe/luajit-rocks &&     mkdir build && cd build &&     cmake -D CMAKE_BUILD_TYPE=RELEASE           -D CMAKE_INSTALL_PREFIX=/usr/local           -D WITH_LUAJIT21=ON           .. &&     make -j\"$(nproc)\" install &&     DEBIAN_FRONTEND=noninteractive $APT_INSTALL         libjpeg-dev         libpng-dev         libreadline-dev         &&     $GIT_CLONE https://github.com/Yonaba/Moses ~/moses &&     cd ~/moses &&     luarocks install rockspec/moses-1.6.1-1.rockspec &&     cd ~/torch &&     sed -i 's/extra\\/cudnn/extra\\/cudnn \\&\\& git checkout R7/' install.sh &&     sed -i 's/$PREFIX\\/bin\\/luarocks/luarocks/' install.sh &&     sed -i '/qt/d' install.sh &&     sed -i '/Installing Lua/,/^cd \\.\\.$/d' install.sh &&     sed -i '/path_to_nvidiasmi/,/^fi$/d' install.sh &&     sed -i '/Restore anaconda/,/^Not updating$/d' install.sh &&     sed -i '/You might want to/,/^fi$/d' install.sh &&     sed -i 's/\\[ -x \"$path_to_nvcc\" \\]/false/' install.sh &&     yes no | ./install.sh &&     luarocks install image &&     luarocks install nn &&     wget -O ~/boost.tar.gz https://dl.bintray.com/boostorg/release/1.69.0/source/boost_1_69_0.tar.gz &&     tar -zxf ~/boost.tar.gz -C ~ &&     cd ~/boost_* &&     ./bootstrap.sh --with-python=python3.6 &&     ./b2 install -j\"$(nproc)\" --prefix=/usr/local &&     $PIP_INSTALL         chainer         &&     $PIP_INSTALL         jupyter         &&     DEBIAN_FRONTEND=noninteractive $APT_INSTALL         libatlas-base-dev         graphviz         &&     $PIP_INSTALL         mxnet         graphviz         &&     DEBIAN_FRONTEND=noninteractive $APT_INSTALL         protobuf-compiler         libprotoc-dev         &&     $PIP_INSTALL         onnx         &&     $PIP_INSTALL         future         numpy         protobuf         enum34         pyyaml         typing     \ttorch         &&     $PIP_INSTALL     \"git+https://github.com/pytorch/vision.git\" &&     $PIP_INSTALL         torch_nightly -f         https://download.pytorch.org/whl/nightly/cpu/torch_nightly.html         &&     $PIP_INSTALL         tf-nightly-2.0-preview         &&     DEBIAN_FRONTEND=noninteractive $APT_INSTALL         libblas-dev         &&     $PIP_INSTALL         https://github.com/Theano/Theano/archive/master.zip         &&     $PIP_INSTALL         h5py         keras         &&     $GIT_CLONE https://github.com/Lasagne/Lasagne ~/lasagne &&     cd ~/lasagne &&     $PIP_INSTALL         . &&     DEBIAN_FRONTEND=noninteractive $APT_INSTALL         libatlas-base-dev         libgflags-dev         libgoogle-glog-dev         libhdf5-serial-dev         libleveldb-dev         liblmdb-dev         libprotobuf-dev         libsnappy-dev         protobuf-compiler         &&     $GIT_CLONE --branch 4.0.1 https://github.com/opencv/opencv ~/opencv &&     mkdir -p ~/opencv/build && cd ~/opencv/build &&     cmake -D CMAKE_BUILD_TYPE=RELEASE           -D CMAKE_INSTALL_PREFIX=/usr/local           -D WITH_IPP=OFF           -D WITH_CUDA=OFF           -D WITH_OPENCL=OFF           -D BUILD_TESTS=OFF           -D BUILD_PERF_TESTS=OFF           .. &&     make -j\"$(nproc)\" install &&     ln -s /usr/local/include/opencv4/opencv2 /usr/local/include/opencv2 &&     $PIP_INSTALL         tensorflow_probability         dm-sonnet         &&     $GIT_CLONE https://github.com/BVLC/caffe ~/caffe &&     sed -i 's/CV_LOAD_IMAGE_COLOR/cv::IMREAD_COLOR/g' ~/caffe/src/caffe/layers/window_data_layer.cpp &&     sed -i 's/CV_LOAD_IMAGE_COLOR/cv::IMREAD_COLOR/g' ~/caffe/src/caffe/util/io.cpp &&     sed -i 's/CV_LOAD_IMAGE_GRAYSCALE/cv::IMREAD_GRAYSCALE/g' ~/caffe/src/caffe/util/io.cpp &&     cp ~/caffe/Makefile.config.example ~/caffe/Makefile.config &&     sed -i 's/# CPU_ONLY/CPU_ONLY/g' ~/caffe/Makefile.config &&     sed -i 's/# PYTHON_LIBRARIES/PYTHON_LIBRARIES/g' ~/caffe/Makefile.config &&     sed -i 's/# WITH_PYTHON_LAYER/WITH_PYTHON_LAYER/g' ~/caffe/Makefile.config &&     sed -i 's/# OPENCV_VERSION/OPENCV_VERSION/g' ~/caffe/Makefile.config &&     sed -i 's/2\\.7/3\\.6/g' ~/caffe/Makefile.config &&     sed -i 's/3\\.5/3\\.6/g' ~/caffe/Makefile.config &&     sed -i 's/boost_python3/boost_python36/g' ~/caffe/Makefile.config &&     sed -i 's/\\/usr\\/lib\\/python/\\/usr\\/local\\/lib\\/python/g' ~/caffe/Makefile.config &&     sed -i 's/\\/usr\\/local\\/include/\\/usr\\/local\\/include \\/usr\\/include\\/hdf5\\/serial/g' ~/caffe/Makefile.config &&     sed -i 's/hdf5/hdf5_serial/g' ~/caffe/Makefile &&     sed -i 's/# Debugging/COMMON_FLAGS += -std=c++11\\n# Debugging/g' ~/caffe/Makefile &&     cd ~/caffe &&     make -j\"$(nproc)\" -Wno-deprecated-gpu-targets distribute &&     sed -i 's/,<2//g' ~/caffe/python/requirements.txt &&     $PIP_INSTALL         -r ~/caffe/python/requirements.txt &&     cd ~/caffe/distribute/bin &&     for file in *.bin; do mv \"$file\" \"${file%%.bin}\"; done &&     cd ~/caffe/distribute &&     cp -r bin include lib proto /usr/local/ &&     cp -r python/caffe /usr/local/lib/python3.6/dist-packages/ &&     DEBIAN_FRONTEND=noninteractive $APT_INSTALL         openmpi-bin         libpng-dev         libjpeg-dev         libtiff-dev         &&     ln -s /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.20 /usr/lib/x86_64-linux-gnu/libmpi_cxx.so.1 &&     ln -s /usr/lib/x86_64-linux-gnu/libmpi.so.20.10.1 /usr/lib/x86_64-linux-gnu/libmpi.so.12 &&     wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/v0.14/mklml_lnx_2018.0.3.20180406.tgz | tar -xzf - &&     cp mklml*/* /usr/local -r &&     wget --no-verbose -O - https://github.com/01org/mkl-dnn/archive/v0.14.tar.gz | tar -xzf - &&     cd mkl-dnn-0.14 && mkdir build && cd build &&     ln -s /usr/local external &&     cmake -D CMAKE_BUILD_TYPE=RELEASE           -D CMAKE_INSTALL_PREFIX=/usr/local           .. &&     make -j\"$(nproc)\" install &&     $PIP_INSTALL         cntk         &&     ldconfig &&     apt-get clean &&     apt-get autoremove &&     rm -rf /var/lib/apt/lists/* /tmp/* ~/*" shape="box"];
  "sha256:c8785d59945be3ac90e41df7e3a85ee0ec8c0a009c419879d16e81fb037956c0" [label="sha256:c8785d59945be3ac90e41df7e3a85ee0ec8c0a009c419879d16e81fb037956c0" shape="plaintext"];
  "sha256:5e691c7ba4998fa4b60d1218bbc4ed9845bfa527d7d91b0c48922bbea45ce425" -> "sha256:0ae424ff7d5bf7ade5f6e8b7f570da250dcf5d2d69604799d84079241f7addd1" [label=""];
  "sha256:0ae424ff7d5bf7ade5f6e8b7f570da250dcf5d2d69604799d84079241f7addd1" -> "sha256:c8785d59945be3ac90e41df7e3a85ee0ec8c0a009c419879d16e81fb037956c0" [label=""];
}

