[app/sources/302799346.Dockerfile]
digraph {
  "sha256:ac800b5096b2e05c67a9da565937cd5d6c4545100db7cc4f33619c05648a9227" [label="local://context" shape="ellipse"];
  "sha256:8bd0cf470e7c45de50c2497941e1361904b6a53670796fb87e087a90d964f48f" [label="docker-image://docker.io/library/alpine:3.10" shape="ellipse"];
  "sha256:5f8186d55449745688d01a5ea9f1257d40b112f9066c4c752cebf43db6415a3b" [label="/bin/sh -c set -x ; apk add --no-cache git      && git clone -b $OPENSSL_BRANCH --depth=1 $OPENSSL_URL /srv/openssl      && cd /srv/openssl      && wget https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/openssl-equal-1.1.1a_ciphers.patch      && patch -p1 < openssl-equal-1.1.1a_ciphers.patch      && cd /      && sed -i \"s/dl-cdn.alpinelinux.org/${ALPINE_URL}/g\" /etc/apk/repositories      && GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \t   && CONFIG=\"    --with-openssl=/srv/openssl     --with-openssl-opt='enable-tls1_3' \t\t--prefix=/etc/nginx \t\t--sbin-path=/usr/sbin/nginx \t\t--modules-path=/usr/lib/nginx/modules \t\t--conf-path=/etc/nginx/nginx.conf \t\t--error-log-path=/var/log/nginx/error.log \t\t--http-log-path=/var/log/nginx/access.log \t\t--pid-path=/var/run/nginx.pid \t\t--lock-path=/var/run/nginx.lock \t\t--http-client-body-temp-path=/var/cache/nginx/client_temp \t\t--http-proxy-temp-path=/var/cache/nginx/proxy_temp \t\t--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \t\t--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \t\t--http-scgi-temp-path=/var/cache/nginx/scgi_temp \t\t--user=nginx \t\t--group=nginx \t\t--with-http_ssl_module \t\t--with-http_realip_module \t\t--with-http_addition_module \t\t--with-http_sub_module \t\t--with-http_dav_module \t\t--with-http_flv_module \t\t--with-http_mp4_module \t\t--with-http_gunzip_module \t\t--with-http_gzip_static_module \t\t--with-http_random_index_module \t\t--with-http_secure_link_module \t\t--with-http_stub_status_module \t\t--with-http_auth_request_module \t\t--with-http_xslt_module=dynamic \t\t--with-http_image_filter_module=dynamic \t\t--with-http_geoip_module=dynamic \t\t--with-threads \t\t--with-stream \t\t--with-stream_ssl_module \t\t--with-stream_ssl_preread_module \t\t--with-stream_realip_module \t\t--with-stream_geoip_module=dynamic \t\t--with-http_slice_module \t\t--with-mail \t\t--with-mail_ssl_module \t\t--with-compat \t\t--with-file-aio \t\t--with-http_v2_module     --with-http_v2_hpack_enc \t\" \t&& addgroup -S nginx \t&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \t&& apk add --no-cache --virtual .build-deps \t\tgcc \t\tlibc-dev \t\tmake     openssl-dev \t\tpcre-dev \t\tzlib-dev \t\tlinux-headers \t\tcurl \t\tgnupg1 \t\tlibxslt-dev \t\tgd-dev \t\tgeoip-dev     perl     perl-dev     gettext \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \t&& curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc -o nginx.tar.gz.asc \t&& export GNUPGHOME=\"$(mktemp -d)\" \t&& found=''; \tfor server in \t\tha.pool.sks-keyservers.net \t\thkp://keyserver.ubuntu.com:80 \t\thkp://p80.pool.sks-keyservers.net:80 \t\tpgp.mit.edu \t; do \t\techo \"Fetching GPG key $GPG_KEYS from $server\"; \t\tgpg --keyserver \"$server\" --keyserver-options timeout=10 --recv-keys \"$GPG_KEYS\" && found=yes && break; \tdone; \ttest -z \"$found\" && echo >&2 \"error: failed to fetch GPG key $GPG_KEYS\" && exit 1; \tgpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \t&& rm -rf \"$GNUPGHOME\" nginx.tar.gz.asc \t&& mkdir -p /usr/src \t&& tar -zxC /usr/src -f nginx.tar.gz \t&& rm nginx.tar.gz   && cd /usr/src/nginx-$NGINX_VERSION   && wget https://raw.githubusercontent.com/hakasenyang/openssl-patch/master/nginx_hpack_push_1.15.3.patch   && patch -p1 < nginx_hpack_push_1.15.3.patch \t; ./configure $CONFIG --with-debug \t&& make -j$(getconf _NPROCESSORS_ONLN) \t&& mv objs/nginx objs/nginx-debug \t&& mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \t&& mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \t&& mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \t&& mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \t&& ./configure $CONFIG \t&& make -j$(getconf _NPROCESSORS_ONLN) \t&& make install \t&& rm -rf /etc/nginx/html/index.html \t&& mkdir /etc/nginx/conf.d/ \t&& install -m755 objs/nginx-debug /usr/sbin/nginx-debug \t&& install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \t&& install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \t&& install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \t&& install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \t&& ln -s /usr/lib/nginx/modules /etc/nginx/modules \t&& strip /usr/sbin/nginx* \t&& strip /usr/lib/nginx/modules/*.so \t&& rm -rf /usr/src/nginx-$NGINX_VERSION \t&& apk add --no-cache --virtual .gettext gettext \t&& mv /usr/bin/envsubst /tmp/ \t\t&& runDeps=\"$( \t\tscanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \t\t\t| tr ',' '\\n' \t\t\t| sort -u \t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \t)\"   && apk add --no-cache --virtual .nginx-rundeps $runDeps \t&& apk del --no-cache .build-deps \t&& apk del --no-cache .gettext   && apk del --no-cache git \t&& mv /tmp/envsubst /usr/local/bin/ \t\t&& apk add --no-cache tzdata \t\t&& ln -sf /dev/stdout /var/log/nginx/access.log \t&& ln -sf /dev/stderr /var/log/nginx/error.log   && rm -rf /srv/openssl" shape="box"];
  "sha256:ef45748ea303d1ee8ff6873ca5aad56612ec7c61a8b64daf5aa11fa2d4b9d845" [label="copy{src=/nginx.conf, dest=/etc/nginx/nginx.conf}" shape="note"];
  "sha256:9fa4ebf239ce87c8b13ae927dea4a1f627cd015e599840c984e52c3e21291b67" [label="copy{src=/nginx.vh.default.conf, dest=/etc/nginx/conf.d/default.conf}" shape="note"];
  "sha256:ce293a454d3441e40b79e3bd774a5e4a53b77f3445409a49cebaef801c214344" [label="copy{src=/index.html, dest=/etc/nginx/html/}" shape="note"];
  "sha256:3f6eda40d75e96f9fa9a0c0fcd8c650ebb958cccde39e2a081ebaa2c9fe6d08e" [label="sha256:3f6eda40d75e96f9fa9a0c0fcd8c650ebb958cccde39e2a081ebaa2c9fe6d08e" shape="plaintext"];
  "sha256:8bd0cf470e7c45de50c2497941e1361904b6a53670796fb87e087a90d964f48f" -> "sha256:5f8186d55449745688d01a5ea9f1257d40b112f9066c4c752cebf43db6415a3b" [label=""];
  "sha256:5f8186d55449745688d01a5ea9f1257d40b112f9066c4c752cebf43db6415a3b" -> "sha256:ef45748ea303d1ee8ff6873ca5aad56612ec7c61a8b64daf5aa11fa2d4b9d845" [label=""];
  "sha256:ac800b5096b2e05c67a9da565937cd5d6c4545100db7cc4f33619c05648a9227" -> "sha256:ef45748ea303d1ee8ff6873ca5aad56612ec7c61a8b64daf5aa11fa2d4b9d845" [label=""];
  "sha256:ef45748ea303d1ee8ff6873ca5aad56612ec7c61a8b64daf5aa11fa2d4b9d845" -> "sha256:9fa4ebf239ce87c8b13ae927dea4a1f627cd015e599840c984e52c3e21291b67" [label=""];
  "sha256:ac800b5096b2e05c67a9da565937cd5d6c4545100db7cc4f33619c05648a9227" -> "sha256:9fa4ebf239ce87c8b13ae927dea4a1f627cd015e599840c984e52c3e21291b67" [label=""];
  "sha256:9fa4ebf239ce87c8b13ae927dea4a1f627cd015e599840c984e52c3e21291b67" -> "sha256:ce293a454d3441e40b79e3bd774a5e4a53b77f3445409a49cebaef801c214344" [label=""];
  "sha256:ac800b5096b2e05c67a9da565937cd5d6c4545100db7cc4f33619c05648a9227" -> "sha256:ce293a454d3441e40b79e3bd774a5e4a53b77f3445409a49cebaef801c214344" [label=""];
  "sha256:ce293a454d3441e40b79e3bd774a5e4a53b77f3445409a49cebaef801c214344" -> "sha256:3f6eda40d75e96f9fa9a0c0fcd8c650ebb958cccde39e2a081ebaa2c9fe6d08e" [label=""];
}

