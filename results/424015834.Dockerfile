[app/sources/424015834.Dockerfile]
digraph {
  "sha256:6cf37804c1b84c273f99d1a24559ddb485c073c7c159d95652da48c75a6bae2d" [label="local://context" shape="ellipse"];
  "sha256:5b8eea1178ba86c101bb54873e67e117616bcad47c6ccecbdedbdb3bfa7f3ee6" [label="docker-image://docker.io/library/alpine:3.10.0" shape="ellipse"];
  "sha256:4bbc028afe2cc8b5f15f918023ca0035fbee6a977dc005b34bae62cf5eef06fb" [label="/bin/sh -c set -x     && addgroup -g 101 -S nginx     && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx     && apkArch=\"$(cat /etc/apk/arch)\"     && nginxPackages=\"         nginx=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-xslt=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-geoip=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-image-filter=${NGINX_VERSION}-r${PKG_RELEASE}         nginx-module-njs=${NGINX_VERSION}.${NJS_VERSION}-r${PKG_RELEASE}     \"     && case \"$apkArch\" in         x86_64)             set -x             && KEY_SHA512=\"e7fa8303923d9b95db37a77ad46c68fd4755ff935d0a534d26eba83de193c76166c68bfe7f65471bf8881004ef4aa6df3e34689c305662750c0172fca5d8552a *stdin\"             && apk add --no-cache --virtual .cert-deps                 openssl curl ca-certificates             && curl -o /tmp/nginx_signing.rsa.pub https://nginx.org/keys/nginx_signing.rsa.pub             && if [ \"$(openssl rsa -pubin -in /tmp/nginx_signing.rsa.pub -text -noout | openssl sha512 -r)\" = \"$KEY_SHA512\" ]; then                  echo \"key verification succeeded!\";                  mv /tmp/nginx_signing.rsa.pub /etc/apk/keys/;                else                  echo \"key verification failed!\";                  exit 1;                fi             && printf \"%s%s%s\\n\"                 \"http://nginx.org/packages/mainline/alpine/v3.9\"                 \"/main\"             | tee -a /etc/apk/repositories             && apk del .cert-deps             ;;         *)             set -x             && tempDir=\"$(mktemp -d)\"             && chown nobody:nobody $tempDir             && apk add --no-cache --virtual .build-deps                 gcc                 libc-dev                 make                 openssl-dev                 pcre-dev                 zlib-dev                 linux-headers                 libxslt-dev                 gd-dev                 geoip-dev                 perl-dev                 libedit-dev                 mercurial                 bash                 alpine-sdk                 findutils             && su - nobody -s /bin/sh -c \"                 export HOME=${tempDir}                 && cd ${tempDir}                 && hg clone https://hg.nginx.org/pkg-oss                 && cd pkg-oss                 && hg up ${NGINX_VERSION}-${PKG_RELEASE}                 && cd alpine                 && make all                 && apk index -o ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz ${tempDir}/packages/alpine/${apkArch}/*.apk                 && abuild-sign -k ${tempDir}/.abuild/abuild-key.rsa ${tempDir}/packages/alpine/${apkArch}/APKINDEX.tar.gz                 \"             && echo \"${tempDir}/packages/alpine/\" >> /etc/apk/repositories             && cp ${tempDir}/.abuild/abuild-key.rsa.pub /etc/apk/keys/             && apk del .build-deps             ;;     esac     && apk add --no-cache $nginxPackages     && if [ -n \"$tempDir\" ]; then rm -rf \"$tempDir\"; fi     && if [ -n \"/etc/apk/keys/abuild-key.rsa.pub\" ]; then rm -f /etc/apk/keys/abuild-key.rsa.pub; fi     && if [ -n \"/etc/apk/keys/nginx_signing.rsa.pub\" ]; then rm -f /etc/apk/keys/nginx_signing.rsa.pub; fi     && sed -i '$ d' /etc/apk/repositories     && apk add --no-cache --virtual .gettext gettext     && mv /usr/bin/envsubst /tmp/         && runDeps=\"$(         scanelf --needed --nobanner /tmp/envsubst             | awk '{ gsub(/,/, \"\\nso:\", $2); print \"so:\" $2 }'             | sort -u             | xargs -r apk info --installed             | sort -u     )\"     && apk add --no-cache $runDeps     && apk del .gettext     && mv /tmp/envsubst /usr/local/bin/     && apk add --no-cache tzdata     && ln -sf /dev/stdout /var/log/nginx/access.log     && ln -sf /dev/stderr /var/log/nginx/error.log" shape="box"];
  "sha256:d30af44f09fc6458a3a96bd1774c24af9a898563d261b674c20d1529d0fde988" [label="/bin/sh -c apk add --no-cache --update --virtual .build-deps gcc libc-dev make openssl-dev pcre-dev zlib-dev linux-headers curl gnupg1 libxslt-dev gd-dev geoip-dev && mkdir -p /usr/src && curl -o ngx_cache_purge.tar.gz -fSL \"http://labs.frickle.com/files/ngx_cache_purge-${NGX_CACHE_PURGE_VERSION}.tar.gz\" && echo \"$NGX_CACHE_PURGE_SHA1 *ngx_cache_purge.tar.gz\" | sha1sum -c - && tar -xzf ngx_cache_purge.tar.gz -C /usr/src/ && rm ngx_cache_purge.tar.gz && curl -o headers-more-nginx-module.tar.gz -fSL \"https://github.com/openresty/headers-more-nginx-module/archive/v${HEADERS_MORE_NGINX_MODULE_VERSION}.tar.gz\" && tar -xzf headers-more-nginx-module.tar.gz -C /usr/src/ && rm headers-more-nginx-module.tar.gz && curl -o nginx.tar.gz -fSL \"https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz\" && tar -xzf nginx.tar.gz -C /usr/src/ && rm nginx.tar.gz && sed -i \"s/HTTP_MODULES/#HTTP_MODULES/g\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\"/config && sed -i \"s/NGX_ADDON_SRCS/#NGX_ADDON_SRCS/g\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\"/config && sed -i \"s|ngx_addon_name=ngx_http_cache_purge_module|ngx_addon_name=ngx_http_cache_purge_module; if test -n \\\"\\$ngx_module_link\\\"; then ngx_module_type=HTTP; ngx_module_name=ngx_http_cache_purge_module; ngx_module_srcs=\\\"\\$ngx_addon_dir/ngx_cache_purge_module.c\\\"; . auto/module; else HTTP_MODULES=\\\"\\$HTTP_MODULES ngx_http_cache_purge_module\\\"; NGX_ADDON_SRCS=\\\"\\$NGX_ADDON_SRCS \\$ngx_addon_dir/ngx_cache_purge_module.c\\\"; fi|g\" /usr/src/ngx_cache_purge-${NGX_CACHE_PURGE_VERSION}/config && sed -i \"s|ngx_addon_name=ngx_http_headers_more_filter_module|ngx_addon_name=ngx_http_headers_more_filter_module; if test -n \\\"\\$ngx_module_link\\\"; then ngx_module_type=HTTP; ngx_module_name=ngx_http_headers_more_filter_module; ngx_module_srcs=\\\"\\$ngx_addon_dir/ngx_http_headers_more_filter_module.c\\\"; . auto/module; else HTTP_MODULES=\\\"\\$HTTP_MODULES ngx_http_headers_more_filter_module\\\"; NGX_ADDON_SRCS=\\\"\\$NGX_ADDON_SRCS \\$ngx_addon_dir/ngx_http_headers_more_filter_module.c\\\"; fi|g\" /usr/src/headers-more-nginx-module-${HEADERS_MORE_NGINX_MODULE_VERSION}/config && cd /usr/src/nginx-\"$NGINX_VERSION\" && ./configure --with-compat --add-dynamic-module=/usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\" && make modules && cp objs/ngx_http_cache_purge_module.so /etc/nginx/modules && make clean && ./configure --with-compat --add-dynamic-module=/usr/src/headers-more-nginx-module-\"$HEADERS_MORE_NGINX_MODULE_VERSION\" && make modules && cp objs/ngx_http_headers_more_filter_module.so /etc/nginx/modules && rm -rf /usr/src/nginx-\"$NGINX_VERSION\" /usr/src/ngx_cache_purge-\"$NGX_CACHE_PURGE_VERSION\" /usr/src/headers-more-nginx-module-\"$HEADERS_MORE_NGINX_MODULE_VERSION\" && apk del .build-deps" shape="box"];
  "sha256:ed4449b95fc8508f3c2c112f91445b7dc171c465f5e0eeb7d7284413c210e0ed" [label="/bin/sh -c set -ex;     apk add --update --no-cache dumb-init" shape="box"];
  "sha256:506eb8b691839d65c5e8d5ef784bcc9f079acab1f2bbc4c47623a39e2a4ce100" [label="copy{src=/nginx.conf, dest=/etc/nginx/nginx.conf}" shape="note"];
  "sha256:d918ff93d7d9d4d92771477fe60090085ea46918e87fb29b9da48d5bd880f85d" [label="sha256:d918ff93d7d9d4d92771477fe60090085ea46918e87fb29b9da48d5bd880f85d" shape="plaintext"];
  "sha256:5b8eea1178ba86c101bb54873e67e117616bcad47c6ccecbdedbdb3bfa7f3ee6" -> "sha256:4bbc028afe2cc8b5f15f918023ca0035fbee6a977dc005b34bae62cf5eef06fb" [label=""];
  "sha256:4bbc028afe2cc8b5f15f918023ca0035fbee6a977dc005b34bae62cf5eef06fb" -> "sha256:d30af44f09fc6458a3a96bd1774c24af9a898563d261b674c20d1529d0fde988" [label=""];
  "sha256:d30af44f09fc6458a3a96bd1774c24af9a898563d261b674c20d1529d0fde988" -> "sha256:ed4449b95fc8508f3c2c112f91445b7dc171c465f5e0eeb7d7284413c210e0ed" [label=""];
  "sha256:ed4449b95fc8508f3c2c112f91445b7dc171c465f5e0eeb7d7284413c210e0ed" -> "sha256:506eb8b691839d65c5e8d5ef784bcc9f079acab1f2bbc4c47623a39e2a4ce100" [label=""];
  "sha256:6cf37804c1b84c273f99d1a24559ddb485c073c7c159d95652da48c75a6bae2d" -> "sha256:506eb8b691839d65c5e8d5ef784bcc9f079acab1f2bbc4c47623a39e2a4ce100" [label=""];
  "sha256:506eb8b691839d65c5e8d5ef784bcc9f079acab1f2bbc4c47623a39e2a4ce100" -> "sha256:d918ff93d7d9d4d92771477fe60090085ea46918e87fb29b9da48d5bd880f85d" [label=""];
}

